class Solution {
public:
    long long zeroFilledSubarray(vector<int>& nums) {
        int n = nums.size();
        if (n==1 && nums[0]==0)
            return 1;
        if (n==1 && nums[0]!=0)
            return 0;   
        int j=1,i=0;
        long long sum=0;
        for(i=0;i<n-1;i++){
            if(nums[i]==0 && nums[i+1]==0){
                sum+=j;
                j++;
            }
            else if(nums[i]==0 && nums[i+1]!=0){
                sum+=j;
                j=1;
            }  
        }
        if(nums[i]==0 && nums[i-1]==0)
            sum+=j;
            j++;
        if(nums[i]==0 && nums[i-1]!=0)
            sum+=1;
        return sum;
    }
};

The time complexity of this function is O(n), where n is the size of the input vector. This is because the function uses a single for loop to iterate through the input vector once. Inside the loop, the function performs constant time operations such as comparisons and additions.

The space complexity of this function is O(1), meaning it uses a constant amount of memory regardless of the size of the input vector. This is because the function only uses a few integer variables to keep track of the sum and the indices i and j. It does not create any additional data structures or arrays, and it modifies the input vector in place.

Overall, this function has a linear time complexity and a constant space complexity, which makes it efficient for large input sizes.



